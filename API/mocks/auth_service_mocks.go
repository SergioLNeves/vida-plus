// Code generated by mockery v2.53.4. DO NOT EDIT.

package models

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "github.com/vida-plus/api/models"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// GenerateRefreshToken provides a mock function with given fields: ctx, user
func (_m *AuthService) GenerateRefreshToken(ctx context.Context, user *models.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type AuthService_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - user *models.User
func (_e *AuthService_Expecter) GenerateRefreshToken(ctx interface{}, user interface{}) *AuthService_GenerateRefreshToken_Call {
	return &AuthService_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", ctx, user)}
}

func (_c *AuthService_GenerateRefreshToken_Call) Run(run func(ctx context.Context, user *models.User)) *AuthService_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.User))
	})
	return _c
}

func (_c *AuthService_GenerateRefreshToken_Call) Return(_a0 string, _a1 error) *AuthService_GenerateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_GenerateRefreshToken_Call) RunAndReturn(run func(context.Context, *models.User) (string, error)) *AuthService_GenerateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *AuthService) Login(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *AuthService_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *AuthService_Login_Call {
	return &AuthService_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *AuthService_Login_Call) Run(run func(ctx context.Context, email string, password string)) *AuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthService_Login_Call) Return(token string, err error) *AuthService_Login_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *AuthService_Login_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *AuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, email, password
func (_m *AuthService) Register(ctx context.Context, email string, password string) (*models.User, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type AuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *AuthService_Expecter) Register(ctx interface{}, email interface{}, password interface{}) *AuthService_Register_Call {
	return &AuthService_Register_Call{Call: _e.mock.On("Register", ctx, email, password)}
}

func (_c *AuthService_Register_Call) Run(run func(ctx context.Context, email string, password string)) *AuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthService_Register_Call) Return(_a0 *models.User, _a1 error) *AuthService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_Register_Call) RunAndReturn(run func(context.Context, string, string) (*models.User, error)) *AuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterWithProfile provides a mock function with given fields: ctx, req
func (_m *AuthService) RegisterWithProfile(ctx context.Context, req models.RegisterRequest) (*models.User, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RegisterWithProfile")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.RegisterRequest) (*models.User, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.RegisterRequest) *models.User); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.RegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_RegisterWithProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterWithProfile'
type AuthService_RegisterWithProfile_Call struct {
	*mock.Call
}

// RegisterWithProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - req models.RegisterRequest
func (_e *AuthService_Expecter) RegisterWithProfile(ctx interface{}, req interface{}) *AuthService_RegisterWithProfile_Call {
	return &AuthService_RegisterWithProfile_Call{Call: _e.mock.On("RegisterWithProfile", ctx, req)}
}

func (_c *AuthService_RegisterWithProfile_Call) Run(run func(ctx context.Context, req models.RegisterRequest)) *AuthService_RegisterWithProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(models.RegisterRequest))
	})
	return _c
}

func (_c *AuthService_RegisterWithProfile_Call) Return(_a0 *models.User, _a1 error) *AuthService_RegisterWithProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_RegisterWithProfile_Call) RunAndReturn(run func(context.Context, models.RegisterRequest) (*models.User, error)) *AuthService_RegisterWithProfile_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRefreshToken provides a mock function with given fields: ctx, token
func (_m *AuthService) ValidateRefreshToken(ctx context.Context, token string) (*models.User, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_ValidateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRefreshToken'
type AuthService_ValidateRefreshToken_Call struct {
	*mock.Call
}

// ValidateRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *AuthService_Expecter) ValidateRefreshToken(ctx interface{}, token interface{}) *AuthService_ValidateRefreshToken_Call {
	return &AuthService_ValidateRefreshToken_Call{Call: _e.mock.On("ValidateRefreshToken", ctx, token)}
}

func (_c *AuthService_ValidateRefreshToken_Call) Run(run func(ctx context.Context, token string)) *AuthService_ValidateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthService_ValidateRefreshToken_Call) Return(_a0 *models.User, _a1 error) *AuthService_ValidateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_ValidateRefreshToken_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *AuthService_ValidateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
