// Code generated by mockery v2.53.4. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/vida-plus/api/internal/domain"
)

// AuthServiceMock is an autogenerated mock type for the AuthService type
type AuthServiceMock struct {
	mock.Mock
}

type AuthServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthServiceMock) EXPECT() *AuthServiceMock_Expecter {
	return &AuthServiceMock_Expecter{mock: &_m.Mock}
}

// GenerateRefreshToken provides a mock function with given fields: ctx, user
func (_m *AuthServiceMock) GenerateRefreshToken(ctx context.Context, user *domain.User) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_GenerateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRefreshToken'
type AuthServiceMock_GenerateRefreshToken_Call struct {
	*mock.Call
}

// GenerateRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.User
func (_e *AuthServiceMock_Expecter) GenerateRefreshToken(ctx interface{}, user interface{}) *AuthServiceMock_GenerateRefreshToken_Call {
	return &AuthServiceMock_GenerateRefreshToken_Call{Call: _e.mock.On("GenerateRefreshToken", ctx, user)}
}

func (_c *AuthServiceMock_GenerateRefreshToken_Call) Run(run func(ctx context.Context, user *domain.User)) *AuthServiceMock_GenerateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*domain.User))
	})
	return _c
}

func (_c *AuthServiceMock_GenerateRefreshToken_Call) Return(_a0 string, _a1 error) *AuthServiceMock_GenerateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_GenerateRefreshToken_Call) RunAndReturn(run func(context.Context, *domain.User) (string, error)) *AuthServiceMock_GenerateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *AuthServiceMock) Login(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthServiceMock_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *AuthServiceMock_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *AuthServiceMock_Login_Call {
	return &AuthServiceMock_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *AuthServiceMock_Login_Call) Run(run func(ctx context.Context, email string, password string)) *AuthServiceMock_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthServiceMock_Login_Call) Return(token string, err error) *AuthServiceMock_Login_Call {
	_c.Call.Return(token, err)
	return _c
}

func (_c *AuthServiceMock_Login_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *AuthServiceMock_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, email, password
func (_m *AuthServiceMock) Register(ctx context.Context, email string, password string) (*domain.User, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domain.User, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.User); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type AuthServiceMock_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *AuthServiceMock_Expecter) Register(ctx interface{}, email interface{}, password interface{}) *AuthServiceMock_Register_Call {
	return &AuthServiceMock_Register_Call{Call: _e.mock.On("Register", ctx, email, password)}
}

func (_c *AuthServiceMock_Register_Call) Run(run func(ctx context.Context, email string, password string)) *AuthServiceMock_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *AuthServiceMock_Register_Call) Return(_a0 *domain.User, _a1 error) *AuthServiceMock_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_Register_Call) RunAndReturn(run func(context.Context, string, string) (*domain.User, error)) *AuthServiceMock_Register_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterWithProfile provides a mock function with given fields: ctx, req
func (_m *AuthServiceMock) RegisterWithProfile(ctx context.Context, req domain.RegisterRequest) (*domain.User, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RegisterWithProfile")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.RegisterRequest) (*domain.User, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.RegisterRequest) *domain.User); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.RegisterRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_RegisterWithProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterWithProfile'
type AuthServiceMock_RegisterWithProfile_Call struct {
	*mock.Call
}

// RegisterWithProfile is a helper method to define mock.On call
//   - ctx context.Context
//   - req domain.RegisterRequest
func (_e *AuthServiceMock_Expecter) RegisterWithProfile(ctx interface{}, req interface{}) *AuthServiceMock_RegisterWithProfile_Call {
	return &AuthServiceMock_RegisterWithProfile_Call{Call: _e.mock.On("RegisterWithProfile", ctx, req)}
}

func (_c *AuthServiceMock_RegisterWithProfile_Call) Run(run func(ctx context.Context, req domain.RegisterRequest)) *AuthServiceMock_RegisterWithProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.RegisterRequest))
	})
	return _c
}

func (_c *AuthServiceMock_RegisterWithProfile_Call) Return(_a0 *domain.User, _a1 error) *AuthServiceMock_RegisterWithProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_RegisterWithProfile_Call) RunAndReturn(run func(context.Context, domain.RegisterRequest) (*domain.User, error)) *AuthServiceMock_RegisterWithProfile_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateRefreshToken provides a mock function with given fields: ctx, token
func (_m *AuthServiceMock) ValidateRefreshToken(ctx context.Context, token string) (*domain.User, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRefreshToken")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.User, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.User); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceMock_ValidateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateRefreshToken'
type AuthServiceMock_ValidateRefreshToken_Call struct {
	*mock.Call
}

// ValidateRefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *AuthServiceMock_Expecter) ValidateRefreshToken(ctx interface{}, token interface{}) *AuthServiceMock_ValidateRefreshToken_Call {
	return &AuthServiceMock_ValidateRefreshToken_Call{Call: _e.mock.On("ValidateRefreshToken", ctx, token)}
}

func (_c *AuthServiceMock_ValidateRefreshToken_Call) Run(run func(ctx context.Context, token string)) *AuthServiceMock_ValidateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AuthServiceMock_ValidateRefreshToken_Call) Return(_a0 *domain.User, _a1 error) *AuthServiceMock_ValidateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceMock_ValidateRefreshToken_Call) RunAndReturn(run func(context.Context, string) (*domain.User, error)) *AuthServiceMock_ValidateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthServiceMock creates a new instance of AuthServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceMock {
	mock := &AuthServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
