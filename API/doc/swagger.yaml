basePath: /v1
definitions:
  models.APIError:
    properties:
      details: {}
      status:
        type: integer
      title:
        type: string
      type:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: mypassword123
        minLength: 1
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        example: user@example.com
        type: string
      password:
        example: mypassword123
        maxLength: 128
        minLength: 8
        type: string
      profile:
        $ref: '#/definitions/models.UserProfile'
      type:
        allOf:
        - $ref: '#/definitions/models.UserType'
        example: patient
    required:
    - email
    - password
    - profile
    - type
    type: object
  models.RegisterResponse:
    properties:
      email:
        example: user@example.com
        type: string
      id:
        example: user123
        type: string
      profile:
        $ref: '#/definitions/models.UserProfile'
      type:
        allOf:
        - $ref: '#/definitions/models.UserType'
        example: patient
    type: object
  models.UserProfile:
    properties:
      coren:
        description: Para enfermeiros
        type: string
      cpf:
        type: string
      crm:
        description: Para médicos
        type: string
      date_of_birth:
        description: Para pacientes
        type: string
      department:
        description: Para funcionários
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      speciality:
        description: Para médicos
        type: string
    type: object
  models.UserType:
    enum:
    - patient
    - doctor
    - nurse
    - admin
    - receptionist
    type: string
    x-enum-comments:
      UserTypeAdmin: Administrador
      UserTypeDoctor: Médico
      UserTypeNurse: Enfermeiro
      UserTypePatient: Paciente
      UserTypeReceptionist: Recepcionista
    x-enum-varnames:
    - UserTypePatient
    - UserTypeDoctor
    - UserTypeNurse
    - UserTypeAdmin
    - UserTypeReceptionist
host: localhost:8080
info:
  contact:
    email: support@vidaplus.com
    name: Vida Plus Support
    url: http://www.vidaplus.com/support
  description: API para o sistema Vida Plus - gestão de saúde e bem-estar
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Vida Plus API
  version: "1.0"
paths:
  /admin/stats:
    get:
      description: Get system usage statistics and metrics
      produces:
      - application/json
      responses:
        "200":
          description: System statistics
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - BearerAuth: []
      summary: Get system statistics (Admin only)
      tags:
      - admin
  /admin/users:
    get:
      description: Get list of all users in the system
      produces:
      - application/json
      responses:
        "200":
          description: List of all users
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - BearerAuth: []
      summary: Get all users (Admin only)
      tags:
      - admin
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: User login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIError'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Login user
      tags:
      - authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password, type and profile
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIError'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Register a new user
      tags:
      - authentication
  /health:
    get:
      description: Check the health status of the API and database connection
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            additionalProperties:
              type: string
            type: object
        "503":
          description: Service unavailable
          schema:
            $ref: '#/definitions/models.APIError'
      summary: Health check
      tags:
      - health
  /protected:
    get:
      description: Get protected information that requires authentication
      produces:
      - application/json
      responses:
        "200":
          description: Protected information
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIError'
      security:
      - BearerAuth: []
      summary: Get protected information
      tags:
      - protected
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
