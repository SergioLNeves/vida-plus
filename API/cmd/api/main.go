// Package main is the entry point for the API server.
// @title Vida Plus API
// @version 1.0
// @description API para o sistema Vida Plus - gestão de saúde e bem-estar
// @termsOfService http://swagger.io/terms/

// @contact.name Vida Plus Support
// @contact.url http://www.vidaplus.com/support
// @contact.email support@vidaplus.com

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8080
// @BasePath /v1

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.
package main

import (
	"github.com/labstack/echo/v4"
	echoSwagger "github.com/swaggo/echo-swagger"
	"github.com/vida-plus/api/internal/auth"
	"github.com/vida-plus/api/internal/handlers"
	"github.com/vida-plus/api/internal/middleware"
	"github.com/vida-plus/api/internal/repository"
	"github.com/vida-plus/api/internal/user"
	"github.com/vida-plus/api/models"
	"github.com/vida-plus/api/pkg"
	"github.com/vida-plus/api/pkg/database"

	_ "github.com/vida-plus/api/doc" // docs is generated by Swag CLI, you have to import it.
)

func main() {
	// Initialize MongoDB connection
	mongoClient := database.InitMongoDB()
	defer database.DisconnectMongoDB(mongoClient)

	// Initialize database and repositories
	db := database.GetDatabase(mongoClient, "vida_plus")
	userRepo := repository.NewUserRepository(db)

	// Initialize other dependencies
	jwtManager := pkg.NewJWTManager()
	_ = handlers.GetValidator()

	e := echo.New()

	// Configure Swagger documentation
	e.GET("/swagger/*", echoSwagger.WrapHandler)

	// Configure health check endpoint
	healthHandler := handlers.NewHealthHandler(mongoClient)
	e.GET("/health", healthHandler.Check)

	// Configure routes
	configureAuthRoutes(e, jwtManager, userRepo)
	configureProtectedRoutes(e, jwtManager)

	e.Logger.Fatal(e.Start(":8080"))
}

func configureAuthRoutes(e *echo.Echo, jwtManager models.JWTManager, userRepo models.UserRepository) {
	userService := user.NewUserService(userRepo)
	authService := auth.NewAuthService(userService, jwtManager)
	authHandler := handlers.NewAuthHandler(authService)

	// Configuração das rotas de autenticação
	v1 := e.Group("/v1")
	v1.POST("/auth/register", authHandler.Register)
	v1.POST("/auth/login", authHandler.Login)
}

func configureProtectedRoutes(e *echo.Echo, jwtManager models.JWTManager) {
	protectedHandler := handlers.NewProtectedHandler()

	// Configuração das rotas protegidas (exemplo simples)
	v1 := e.Group("/v1", middleware.JWTMiddleware(jwtManager))
	v1.GET("/protected", protectedHandler.GetProtectedInfo)

	// Endpoint simples para demonstrar diferenciação de usuários
	v1.GET("/profile", func(c echo.Context) error {
		claims, err := models.GetAuthClaims(c.Get("claims"))
		if err != nil {
			return c.JSON(401, models.NewAPIError(401, err.Error()))
		}

		return c.JSON(200, map[string]interface{}{
			"user_id": claims.UserID,
			"email":   claims.Email,
			"type":    claims.UserType,
			"message": "Perfil do usuário - acesso baseado no tipo: " + string(claims.UserType),
		})
	})
}
